<policies>
    <inbound>
        <base />
	<!-- setting the value of isStream to later enable checks based upon streaming scenarios -->
	<choose>
            <when condition="@(context.Request.Body.As<JObject>(true)[" stream"] != null && context.Request.Body.As<JObject>(true)[" stream"].Type != JTokenType.Null)">
                <set-variable name="isStream" value="@{
            var content = (context.Request.Body?.As<JObject>(true));
            string streamValue = content["stream"].ToString();
            return streamValue;
        }" />
            </when>
        </choose>
        <!-- applies tokens constraint defined as per the fragment, doesn't set the backend-->
        <include-fragment fragment-id="adaptive-rate-limiting" />
        <!-- this can be used for new ratelimiting isn't available in the region -->
        <!-- <include-fragment fragment-id="adaptive-rate-limiting-workaround" /> -->

        <!-- START: set backend service -->

        <!-- performs simple round robin between payg-backend-1, payg-backend-2 -->
        <!-- <include-fragment fragment-id="simple-round-robin" /> -->
        
        <!-- performs weighted round robin between payg-backend-1, payg-backend-2 
             weights are defined in the fragment itself -->
        <include-fragment fragment-id="weighted-round-robin" />

        <!-- tracks token consumption as custom metrics in App insights -->
        <include-fragment fragment-id="usage-tracking-with-appinsights" />
    </inbound>
    <backend>
        <!-- either base or the fragment needs to be present.  -->
        <!-- <base /> -->
        <!-- sets backend to PTU endpoint by default and retries with PAYG when PTU return 429 -->
        <include-fragment fragment-id="retry-with-payg" />
        <!-- END: sets backend service -->
    </backend>
    <outbound>
        <base />
        
         <set-header name="x-apim-backend" exists-action="override">
            <value>@((string)context.Variables["selected-backend-id"])</value>
        </set-header>
        <choose>
		<!-- checks for non streaming scenarios in case of sending responses to eventhub -->
               <when condition="@(context.Response.StatusCode == 200 && context.Variables.GetValueOrDefault<string>("isStream", "false").Equals("true", StringComparison.OrdinalIgnoreCase))">
                <!--
					NOTE: To retrieve context.Response.Body in inbound section, this object needs to be accessed first in the outbound section of the policy. Not doing so will return null body in Inbound section.
					We are using preserveContent=true when deserializing response body stream into a JSON object since we intend to access it again. See details on htTPM://docs.microsoft.com/en-us/azure/api-management/api-management-transformation-policies#SetBody 
				-->
                <!--Response Modification:
					Checks if the response status code is 200.
					Converts the response body into a JSON object to be returned as a string.-->
                <set-body>@{                   
                JObject api_response = context.Response.Body.As&lt;JObject&gt;(preserveContent: true);                
                return api_response.ToString();                         
                }</set-body>
            </when>
        </choose>

        <!-- tracks token consumption using the event hub, this can be used as a workaround if the 
        new policy isn't available in the region yet. -->
        <!-- <include-fragment fragment-id="usage-tracking-with-eventhub" /> -->
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
