{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.8.9.13224",
      "templateHash": "7044181974537509554"
    }
  },
  "parameters": {
    "workloadName": {
      "type": "string",
      "maxLength": 8,
      "metadata": {
        "description": "A short name for the workload being deployed alphanumberic only"
      }
    },
    "environment": {
      "type": "string",
      "allowedValues": [
        "dev",
        "uat",
        "prod",
        "dr"
      ],
      "metadata": {
        "description": "The environment for which the deployment is being executed"
      }
    },
    "vmUsername": {
      "type": "string",
      "metadata": {
        "description": "The user name to be used as the Administrator for all VMs created by this deployment"
      }
    },
    "vmPassword": {
      "type": "string",
      "metadata": {
        "description": "The password for the Administrator user for all VMs created by this deployment"
      }
    },
    "CICDAgentType": {
      "type": "string",
      "allowedValues": [
        "github",
        "azuredevops",
        "none"
      ],
      "metadata": {
        "description": "The CI/CD platform to be used, and for which an agent will be configured for the ASE deployment. Specify 'none' if no agent needed"
      }
    },
    "accountName": {
      "type": "string",
      "metadata": {
        "description": "The Azure DevOps or GitHub account name to be used when configuring the CI/CD agent, in the format https://dev.azure.com/ORGNAME OR github.com/ORGUSERNAME OR none"
      }
    },
    "personalAccessToken": {
      "type": "secureString",
      "metadata": {
        "description": "The Azure DevOps or GitHub personal access token (PAT) used to setup the CI/CD agent"
      }
    },
    "appGatewayFqdn": {
      "type": "string",
      "metadata": {
        "description": "The FQDN for the Application Gateway. Example - api.contoso.com."
      }
    },
    "certificatePassword": {
      "type": "secureString",
      "metadata": {
        "description": "The password for the TLS certificate for the Application Gateway.  The pfx file needs to be copied to deployment/bicep/gateway/certs/appgw.pfx"
      }
    },
    "appGatewayCertType": {
      "type": "string",
      "metadata": {
        "description": "Set to selfsigned if self signed certificates should be used for the Application Gateway. Set to custom and copy the pfx file to deployment/bicep/gateway/certs/appgw.pfx if custom certificates are to be used"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]"
    }
  },
  "variables": {
    "resourceSuffix": "[format('{0}-{1}-{2}-001', parameters('workloadName'), parameters('environment'), parameters('location'))]",
    "networkingResourceGroupName": "[format('rg-networking-{0}', variables('resourceSuffix'))]",
    "sharedResourceGroupName": "[format('rg-shared-{0}', variables('resourceSuffix'))]",
    "backendResourceGroupName": "[format('rg-backend-{0}', variables('resourceSuffix'))]",
    "apimResourceGroupName": "[format('rg-apim-{0}', variables('resourceSuffix'))]",
    "apimName": "[format('apim-{0}', variables('resourceSuffix'))]",
    "appGatewayName": "[format('appgw-{0}', variables('resourceSuffix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('networkingResourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('backendResourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('sharedResourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('apimResourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "networkingresources",
      "resourceGroup": "[variables('networkingResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "deploymentEnvironment": {
            "value": "[parameters('environment')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.8.9.13224",
              "templateHash": "5600564907562923214"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "metadata": {
                "description": "A short name for the workload being deployed"
              }
            },
            "deploymentEnvironment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "uat",
                "prod",
                "dr"
              ],
              "metadata": {
                "description": "The environment for which the deployment is being executed"
              }
            },
            "apimCSVNetNameAddressPrefix": {
              "type": "string",
              "defaultValue": "10.2.0.0/16"
            },
            "bastionAddressPrefix": {
              "type": "string",
              "defaultValue": "10.2.1.0/24"
            },
            "devOpsNameAddressPrefix": {
              "type": "string",
              "defaultValue": "10.2.2.0/24"
            },
            "jumpBoxAddressPrefix": {
              "type": "string",
              "defaultValue": "10.2.3.0/24"
            },
            "appGatewayAddressPrefix": {
              "type": "string",
              "defaultValue": "10.2.4.0/24"
            },
            "privateEndpointAddressPrefix": {
              "type": "string",
              "defaultValue": "10.2.5.0/24"
            },
            "backEndAddressPrefix": {
              "type": "string",
              "defaultValue": "10.2.6.0/24"
            },
            "apimAddressPrefix": {
              "type": "string",
              "defaultValue": "10.2.7.0/24"
            },
            "location": {
              "type": "string"
            }
          },
          "variables": {
            "owner": "APIM Const Set",
            "apimCSVNetName": "[format('vnet-apim-cs-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "bastionSubnetName": "AzureBastionSubnet",
            "devOpsSubnetName": "[format('snet-devops-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "jumpBoxSubnetName": "[format('snet-jbox-{0}-{1}-{2}-001', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "appGatewaySubnetName": "[format('snet-apgw-{0}-{1}-{2}-001', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "privateEndpointSubnetName": "[format('snet-prep-{0}-{1}-{2}-001', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "backEndSubnetName": "[format('snet-bcke-{0}-{1}-{2}-001', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "apimSubnetName": "[format('snet-apim-{0}-{1}-{2}-001', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "bastionName": "[format('bastion-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "bastionIPConfigName": "[format('bastionipcfg-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "bastionSNNSG": "[format('nsg-bast-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "devOpsSNNSG": "[format('nsg-devops-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "jumpBoxSNNSG": "[format('nsg-jbox-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "appGatewaySNNSG": "[format('nsg-apgw-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "privateEndpointSNNSG": "[format('nsg-prep-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "backEndSNNSG": "[format('nsg-bcke-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "apimSNNSG": "[format('nsg-apim-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "publicIPAddressName": "[format('pip-apimcs-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]",
            "publicIPAddressNameBastion": "[format('pip-bastion-{0}-{1}-{2}', parameters('workloadName'), parameters('deploymentEnvironment'), parameters('location'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-02-01",
              "name": "[variables('apimCSVNetName')]",
              "location": "[parameters('location')]",
              "tags": {
                "Owner": "[variables('owner')]"
              },
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('apimCSVNetNameAddressPrefix')]"
                  ]
                },
                "enableVmProtection": false,
                "enableDdosProtection": false,
                "subnets": [
                  {
                    "name": "[variables('bastionSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('bastionAddressPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionSNNSG'))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('devOpsSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('devOpsNameAddressPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('devOpsSNNSG'))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('jumpBoxSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('jumpBoxAddressPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('jumpBoxSNNSG'))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('appGatewaySubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('appGatewayAddressPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('appGatewaySNNSG'))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('privateEndpointSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('privateEndpointAddressPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('privateEndpointSNNSG'))]"
                      },
                      "privateEndpointNetworkPolicies": "Disabled"
                    }
                  },
                  {
                    "name": "[variables('backEndSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('backEndAddressPrefix')]",
                      "delegations": [
                        {
                          "name": "delegation",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverfarms"
                          }
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('backEndSNNSG'))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('apimSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('apimAddressPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('apimSNNSG'))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('apimSNNSG'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('appGatewaySNNSG'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('backEndSNNSG'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionSNNSG'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('devOpsSNNSG'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('jumpBoxSNNSG'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('privateEndpointSNNSG'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-06-01",
              "name": "[variables('bastionSNNSG')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowHttpsInbound",
                    "properties": {
                      "priority": 120,
                      "protocol": "Tcp",
                      "destinationPortRange": "443",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "Internet",
                      "destinationAddressPrefix": "*"
                    }
                  },
                  {
                    "name": "AllowGatewayManagerInbound",
                    "properties": {
                      "priority": 130,
                      "protocol": "Tcp",
                      "destinationPortRange": "443",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "GatewayManager",
                      "destinationAddressPrefix": "*"
                    }
                  },
                  {
                    "name": "AllowAzureLoadBalancerInbound",
                    "properties": {
                      "priority": 140,
                      "protocol": "Tcp",
                      "destinationPortRange": "443",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "destinationAddressPrefix": "*"
                    }
                  },
                  {
                    "name": "AllowBastionHostCommunicationInbound",
                    "properties": {
                      "priority": 150,
                      "protocol": "*",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ],
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "name": "AllowSshRdpOutbound",
                    "properties": {
                      "priority": 100,
                      "protocol": "*",
                      "destinationPortRanges": [
                        "22",
                        "3389"
                      ],
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "name": "AllowAzureCloudOutbound",
                    "properties": {
                      "priority": 110,
                      "protocol": "Tcp",
                      "destinationPortRange": "443",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "AzureCloud"
                    }
                  },
                  {
                    "name": "AllowBastionCommunication",
                    "properties": {
                      "priority": 120,
                      "protocol": "*",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ],
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "name": "AllowGetSessionInformation",
                    "properties": {
                      "priority": 130,
                      "protocol": "*",
                      "destinationPortRange": "80",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "Internet"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-06-01",
              "name": "[variables('devOpsSNNSG')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-06-01",
              "name": "[variables('jumpBoxSNNSG')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-06-01",
              "name": "[variables('appGatewaySNNSG')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "HealthProbes",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "65200-65535",
                      "sourceAddressPrefix": "GatewayManager",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "Allow_TLS",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 110,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "Allow_HTTP",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "80",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 111,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "Allow_AzureLoadBalancer",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 120,
                      "direction": "Inbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-06-01",
              "name": "[variables('privateEndpointSNNSG')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-06-01",
              "name": "[variables('backEndSNNSG')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-06-01",
              "name": "[variables('apimSNNSG')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "apim-mgmt-endpoint-for-portal",
                    "properties": {
                      "priority": 2000,
                      "sourceAddressPrefix": "ApiManagement",
                      "protocol": "Tcp",
                      "destinationPortRange": "3443",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "name": "apim-azure-infra-lb",
                    "properties": {
                      "priority": 2010,
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "protocol": "Tcp",
                      "destinationPortRange": "6390",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "name": "apim-azure-storage",
                    "properties": {
                      "priority": 2000,
                      "sourceAddressPrefix": "VirtualNetwork",
                      "protocol": "Tcp",
                      "destinationPortRange": "443",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "Storage"
                    }
                  },
                  {
                    "name": "apim-azure-sql",
                    "properties": {
                      "priority": 2010,
                      "sourceAddressPrefix": "VirtualNetwork",
                      "protocol": "Tcp",
                      "destinationPortRange": "1433",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "SQL"
                    }
                  },
                  {
                    "name": "apim-azure-kv",
                    "properties": {
                      "priority": 2020,
                      "sourceAddressPrefix": "VirtualNetwork",
                      "protocol": "Tcp",
                      "destinationPortRange": "443",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "AzureKeyVault"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2020-07-01",
              "name": "[variables('publicIPAddressName')]",
              "location": "[parameters('location')]",
              "properties": {
                "publicIPAllocationMethod": "Dynamic"
              }
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2020-07-01",
              "name": "[variables('publicIPAddressNameBastion')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4"
              }
            },
            {
              "type": "Microsoft.Network/bastionHosts",
              "apiVersion": "2020-07-01",
              "name": "[variables('bastionName')]",
              "location": "[parameters('location')]",
              "tags": {
                "Owner": "[variables('owner')]"
              },
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "[variables('bastionIPConfigName')]",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressNameBastion'))]"
                      },
                      "subnet": {
                        "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('apimCSVNetName')), variables('bastionSubnetName'))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressNameBastion'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('apimCSVNetName'))]"
              ]
            }
          ],
          "outputs": {
            "apimCSVNetName": {
              "type": "string",
              "value": "[variables('apimCSVNetName')]"
            },
            "apimCSVNetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('apimCSVNetName'))]"
            },
            "bastionSubnetName": {
              "type": "string",
              "value": "[variables('bastionSubnetName')]"
            },
            "devOpsSubnetName": {
              "type": "string",
              "value": "[variables('devOpsSubnetName')]"
            },
            "jumpBoxSubnetName": {
              "type": "string",
              "value": "[variables('jumpBoxSubnetName')]"
            },
            "appGatewaySubnetName": {
              "type": "string",
              "value": "[variables('appGatewaySubnetName')]"
            },
            "privateEndpointSubnetName": {
              "type": "string",
              "value": "[variables('privateEndpointSubnetName')]"
            },
            "backEndSubnetName": {
              "type": "string",
              "value": "[variables('backEndSubnetName')]"
            },
            "apimSubnetName": {
              "type": "string",
              "value": "[variables('apimSubnetName')]"
            },
            "bastionSubnetid": {
              "type": "string",
              "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('apimCSVNetName')), variables('bastionSubnetName'))]"
            },
            "CICDAgentSubnetId": {
              "type": "string",
              "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('apimCSVNetName')), variables('devOpsSubnetName'))]"
            },
            "jumpBoxSubnetid": {
              "type": "string",
              "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('apimCSVNetName')), variables('jumpBoxSubnetName'))]"
            },
            "appGatewaySubnetid": {
              "type": "string",
              "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('apimCSVNetName')), variables('appGatewaySubnetName'))]"
            },
            "privateEndpointSubnetid": {
              "type": "string",
              "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('apimCSVNetName')), variables('privateEndpointSubnetName'))]"
            },
            "backEndSubnetid": {
              "type": "string",
              "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('apimCSVNetName')), variables('backEndSubnetName'))]"
            },
            "apimSubnetid": {
              "type": "string",
              "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('apimCSVNetName')), variables('apimSubnetName'))]"
            },
            "publicIp": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('networkingResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "backendresources",
      "resourceGroup": "[variables('backendResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')).outputs.apimCSVNetName.value]"
          },
          "vnetRG": {
            "value": "[variables('networkingResourceGroupName')]"
          },
          "backendSubnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')).outputs.backEndSubnetid.value]"
          },
          "privateEndpointSubnetid": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')).outputs.privateEndpointSubnetid.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.8.9.13224",
              "templateHash": "7726893162870949454"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "A short name for the workload being deployed alphanumberic only"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "uat",
                "prod",
                "dr"
              ],
              "metadata": {
                "description": "The environment for which the deployment is being executed"
              }
            },
            "backendSubnetId": {
              "type": "string",
              "metadata": {
                "description": "Backend subnet id"
              }
            },
            "privateEndpointSubnetid": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetRG": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "variables": {
            "owner": "APIM Const Set",
            "storageAccounts_saapimcsbackend_name": "[toLower(take(replace(format('stbknd{0}{1}{2}', parameters('workloadName'), parameters('environment'), parameters('location')), '-', ''), 24))]",
            "storageAccounts_location": "[parameters('location')]",
            "storageAccounts_skuName": "Standard_LRS",
            "storageAccounts_kind": "StorageV2",
            "functionContentShareName": "func-contents",
            "storageAccounts_minTLSVersion": "TLS1_2",
            "privateEndpoint_storageaccount_queue_Name": "[format('pep-sa-queue-{0}-{1}-{2}', parameters('workloadName'), parameters('environment'), parameters('location'))]",
            "privateEndpoint_storageaccount_blob_Name": "[format('pep-sa-blob-{0}-{1}-{2}', parameters('workloadName'), parameters('environment'), parameters('location'))]",
            "privateEndpoint_storageaccount_file_Name": "[format('pep-sa-file-{0}-{1}-{2}', parameters('workloadName'), parameters('environment'), parameters('location'))]",
            "privateEndpoint_storageaccount_table_Name": "[format('pep-sa-table-{0}-{1}-{2}', parameters('workloadName'), parameters('environment'), parameters('location'))]",
            "serverfarms_appsvcplanAPIMCSBackend_name": "[format('plan-be-{0}-{1}-{2}', parameters('workloadName'), parameters('environment'), parameters('location'))]",
            "serverfarms_appsvcplanAPIMCSBackend_location": "[parameters('location')]",
            "serverfarms_appsvcplanAPIMCSBackend_skuName": "P2v2",
            "serverfarms_appsvcplanAPIMCSBackend_skuTier": "PremiumV2",
            "serverfarms_appsvcplanAPIMCSBackend_skuSize": "P2v2",
            "serverfarms_appsvcplanAPIMCSBackend_skuFamily": "Pv2",
            "serverfarms_appsvcplanAPIMCSBackend_skuCapacity": 1,
            "sites_funcappAPIMCSBackendMicroServiceA_name": "[format('func-code-be-{0}-{1}-{2}', parameters('workloadName'), parameters('environment'), parameters('location'))]",
            "sites_funcappAPIMCSBackendMicroServiceA_location": "[parameters('location')]",
            "sites_funcappAPIMCSBackendMicroServiceA_siteHostname": "[format('func-code-be-{0}-{1}-{2}.azurewebsites.net', parameters('workloadName'), parameters('environment'), parameters('location'))]",
            "sites_funcappAPIMCSBackendMicroServiceA_repositoryHostname": "[format('func-code-be-{0}-{1}-{2}.scm.azurewebsites.net', parameters('workloadName'), parameters('environment'), parameters('location'))]",
            "sites_funcappAPIMCSBackendMicroServiceA_siteName": "[format('funccodebe{0}{1}{2}', parameters('workloadName'), parameters('environment'), parameters('location'))]",
            "privateEndpoint_funcappAPIMCSBackendMicroServiceA_name": "[format('pep-func-code-be-{0}-{1}-{2}', parameters('workloadName'), parameters('environment'), parameters('location'))]",
            "privateDNSZoneName": "privatelink.azurewebsites.net"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-06-01",
              "name": "[variables('storageAccounts_saapimcsbackend_name')]",
              "location": "[variables('storageAccounts_location')]",
              "tags": {
                "Owner": "[variables('owner')]"
              },
              "sku": {
                "name": "[variables('storageAccounts_skuName')]"
              },
              "kind": "[variables('storageAccounts_kind')]",
              "properties": {
                "minimumTlsVersion": "[variables('storageAccounts_minTLSVersion')]",
                "allowBlobPublicAccess": true,
                "allowSharedKeyAccess": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Deny"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/default/{1}', variables('storageAccounts_saapimcsbackend_name'), variables('functionContentShareName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_saapimcsbackend_name'))]"
              ]
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2018-02-01",
              "name": "[variables('serverfarms_appsvcplanAPIMCSBackend_name')]",
              "location": "[variables('serverfarms_appsvcplanAPIMCSBackend_location')]",
              "tags": {
                "Owner": "[variables('owner')]"
              },
              "sku": {
                "name": "[variables('serverfarms_appsvcplanAPIMCSBackend_skuName')]",
                "tier": "[variables('serverfarms_appsvcplanAPIMCSBackend_skuTier')]",
                "size": "[variables('serverfarms_appsvcplanAPIMCSBackend_skuSize')]",
                "family": "[variables('serverfarms_appsvcplanAPIMCSBackend_skuFamily')]",
                "capacity": "[variables('serverfarms_appsvcplanAPIMCSBackend_skuCapacity')]"
              },
              "kind": "linux",
              "properties": {
                "perSiteScaling": false,
                "maximumElasticWorkerCount": 1,
                "isSpot": false,
                "reserved": true,
                "isXenon": false,
                "hyperV": false,
                "targetWorkerCount": 0,
                "targetWorkerSizeId": 0
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2018-11-01",
              "name": "[variables('sites_funcappAPIMCSBackendMicroServiceA_name')]",
              "location": "[variables('sites_funcappAPIMCSBackendMicroServiceA_location')]",
              "tags": {
                "Owner": "[variables('owner')]"
              },
              "kind": "functionapp,linux",
              "properties": {
                "enabled": true,
                "hostNameSslStates": [
                  {
                    "name": "[variables('sites_funcappAPIMCSBackendMicroServiceA_siteHostname')]",
                    "sslState": "Disabled",
                    "hostType": "Standard"
                  },
                  {
                    "name": "[variables('sites_funcappAPIMCSBackendMicroServiceA_repositoryHostname')]",
                    "sslState": "Disabled",
                    "hostType": "Repository"
                  }
                ],
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_appsvcplanAPIMCSBackend_name'))]",
                "reserved": true,
                "isXenon": false,
                "hyperV": false,
                "siteConfig": {
                  "numberOfWorkers": 1,
                  "linuxFxVersion": "dotnet|3.1",
                  "alwaysOn": true,
                  "http20Enabled": false,
                  "appSettings": [
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', variables('storageAccounts_saapimcsbackend_name'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_saapimcsbackend_name')), '2021-06-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', variables('storageAccounts_saapimcsbackend_name'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_saapimcsbackend_name')), '2021-06-01').keys[0].value)]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~3"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "dotnet"
                    },
                    {
                      "name": "WEBSITE_CONTENTOVERVNET",
                      "value": "1"
                    },
                    {
                      "name": "WEBSITE_CONTENTSHARE",
                      "value": "[variables('functionContentShareName')]"
                    },
                    {
                      "name": "WEBSITE_VNET_ROUTE_ALL",
                      "value": "1"
                    }
                  ]
                },
                "scmSiteAlsoStopped": false,
                "clientAffinityEnabled": false,
                "clientCertEnabled": false,
                "hostNamesDisabled": false,
                "containerSize": 1536,
                "dailyMemoryTimeQuota": 0,
                "httpsOnly": true,
                "redundancyMode": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('privateEndpoint_storageaccount_blob_Name'))]",
                "[resourceId('Microsoft.Resources/deployments', variables('privateEndpoint_storageaccount_file_Name'))]",
                "[resourceId('Microsoft.Resources/deployments', variables('privateEndpoint_storageaccount_queue_Name'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_appsvcplanAPIMCSBackend_name'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_saapimcsbackend_name'))]",
                "[resourceId('Microsoft.Resources/deployments', variables('privateEndpoint_storageaccount_table_Name'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/hostNameBindings",
              "apiVersion": "2018-11-01",
              "name": "[format('{0}/{1}', variables('sites_funcappAPIMCSBackendMicroServiceA_name'), format('{0}.azurewebsites.net', variables('sites_funcappAPIMCSBackendMicroServiceA_name')))]",
              "properties": {
                "siteName": "[variables('sites_funcappAPIMCSBackendMicroServiceA_siteName')]",
                "hostNameType": "Verified"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('sites_funcappAPIMCSBackendMicroServiceA_name'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/networkConfig",
              "apiVersion": "2021-01-01",
              "name": "[format('{0}/{1}', variables('sites_funcappAPIMCSBackendMicroServiceA_name'), 'virtualNetwork')]",
              "properties": {
                "subnetResourceId": "[parameters('backendSubnetId')]",
                "swiftSupported": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('sites_funcappAPIMCSBackendMicroServiceA_name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-03-01",
              "name": "[variables('privateEndpoint_funcappAPIMCSBackendMicroServiceA_name')]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetid')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('privateEndpoint_funcappAPIMCSBackendMicroServiceA_name')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', variables('sites_funcappAPIMCSBackendMicroServiceA_name'))]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('sites_funcappAPIMCSBackendMicroServiceA_name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2018-09-01",
              "name": "[variables('privateDNSZoneName')]",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2018-09-01",
              "name": "[format('{0}/{1}', variables('privateDNSZoneName'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]",
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint_funcappAPIMCSBackendMicroServiceA_name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-03-01",
              "name": "[format('{0}/default', variables('privateEndpoint_funcappAPIMCSBackendMicroServiceA_name'))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}-azurewebsites-net', variables('sites_funcappAPIMCSBackendMicroServiceA_siteHostname'))]",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}', variables('privateDNSZoneName'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[0], split(format('{0}/{1}', variables('privateDNSZoneName'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[1])]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[variables('privateEndpoint_storageaccount_queue_Name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpointName": {
                    "value": "[variables('privateEndpoint_storageaccount_queue_Name')]"
                  },
                  "privateDnsZoneName": {
                    "value": "queueDnsZone"
                  },
                  "storageAcountName": {
                    "value": "[variables('storageAccounts_saapimcsbackend_name')]"
                  },
                  "groupId": {
                    "value": "queue"
                  },
                  "storageAccountId": {
                    "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_saapimcsbackend_name'))]"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "vnetRG": {
                    "value": "[parameters('vnetRG')]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetid')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.8.9.13224",
                      "templateHash": "16689497214647873263"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string"
                    },
                    "groupId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "vnetName": {
                      "type": "string"
                    },
                    "vnetRG": {
                      "type": "string"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "storageAccountId": {
                      "type": "string"
                    },
                    "privateDnsZoneName": {
                      "type": "string"
                    },
                    "storageAcountName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('storageAccountId')]",
                              "groupIds": [
                                "[parameters('groupId')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('privateDnsZoneName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "vnetRG": {
                            "value": "[parameters('vnetRG')]"
                          },
                          "groupId": {
                            "value": "[parameters('groupId')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('privateEndpointName')]"
                          },
                          "storageName": {
                            "value": "[parameters('storageAcountName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.8.9.13224",
                              "templateHash": "11295774772507740412"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string"
                            },
                            "vnetRG": {
                              "type": "string"
                            },
                            "privateEndpointName": {
                              "type": "string"
                            },
                            "groupId": {
                              "type": "string"
                            },
                            "storageName": {
                              "type": "string"
                            },
                            "standardDomain": {
                              "type": "string",
                              "defaultValue": "windows.net"
                            },
                            "domain": {
                              "type": "string",
                              "defaultValue": "[format('privatelink.{0}.core.{1}', parameters('groupId'), parameters('standardDomain'))]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('domain')]",
                              "location": "global"
                            },
                            {
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))))]",
                              "location": "global",
                              "properties": {
                                "virtualNetwork": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                                },
                                "registrationEnabled": false
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-03-01",
                              "name": "[format('{0}/default', parameters('privateEndpointName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[format('{0}-{1}-core-windows-net', parameters('storageName'), parameters('groupId'))]",
                                    "properties": {
                                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]",
                                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[0], split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[1])]"
                              ]
                            }
                          ],
                          "outputs": {
                            "dnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]"
                            },
                            "vnetLinksLink": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[0], split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[1])]"
                            },
                            "dnsZoneGroupId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', split(format('{0}/default', parameters('privateEndpointName')), '/')[0], split(format('{0}/default', parameters('privateEndpointName')), '/')[1])]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('privateDnsZoneName'))).outputs.dnsZoneId.value]"
                    },
                    "dnsZoneGroupId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('privateDnsZoneName'))).outputs.dnsZoneGroupId.value]"
                    },
                    "vnetLinksId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('privateDnsZoneName'))).outputs.vnetLinksLink.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_saapimcsbackend_name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[variables('privateEndpoint_storageaccount_blob_Name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpointName": {
                    "value": "[variables('privateEndpoint_storageaccount_blob_Name')]"
                  },
                  "privateDnsZoneName": {
                    "value": "blobDnsZone"
                  },
                  "storageAcountName": {
                    "value": "[variables('storageAccounts_saapimcsbackend_name')]"
                  },
                  "groupId": {
                    "value": "blob"
                  },
                  "storageAccountId": {
                    "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_saapimcsbackend_name'))]"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "vnetRG": {
                    "value": "[parameters('vnetRG')]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetid')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.8.9.13224",
                      "templateHash": "16689497214647873263"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string"
                    },
                    "groupId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "vnetName": {
                      "type": "string"
                    },
                    "vnetRG": {
                      "type": "string"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "storageAccountId": {
                      "type": "string"
                    },
                    "privateDnsZoneName": {
                      "type": "string"
                    },
                    "storageAcountName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('storageAccountId')]",
                              "groupIds": [
                                "[parameters('groupId')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('privateDnsZoneName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "vnetRG": {
                            "value": "[parameters('vnetRG')]"
                          },
                          "groupId": {
                            "value": "[parameters('groupId')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('privateEndpointName')]"
                          },
                          "storageName": {
                            "value": "[parameters('storageAcountName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.8.9.13224",
                              "templateHash": "11295774772507740412"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string"
                            },
                            "vnetRG": {
                              "type": "string"
                            },
                            "privateEndpointName": {
                              "type": "string"
                            },
                            "groupId": {
                              "type": "string"
                            },
                            "storageName": {
                              "type": "string"
                            },
                            "standardDomain": {
                              "type": "string",
                              "defaultValue": "windows.net"
                            },
                            "domain": {
                              "type": "string",
                              "defaultValue": "[format('privatelink.{0}.core.{1}', parameters('groupId'), parameters('standardDomain'))]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('domain')]",
                              "location": "global"
                            },
                            {
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))))]",
                              "location": "global",
                              "properties": {
                                "virtualNetwork": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                                },
                                "registrationEnabled": false
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-03-01",
                              "name": "[format('{0}/default', parameters('privateEndpointName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[format('{0}-{1}-core-windows-net', parameters('storageName'), parameters('groupId'))]",
                                    "properties": {
                                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]",
                                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[0], split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[1])]"
                              ]
                            }
                          ],
                          "outputs": {
                            "dnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]"
                            },
                            "vnetLinksLink": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[0], split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[1])]"
                            },
                            "dnsZoneGroupId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', split(format('{0}/default', parameters('privateEndpointName')), '/')[0], split(format('{0}/default', parameters('privateEndpointName')), '/')[1])]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('privateDnsZoneName'))).outputs.dnsZoneId.value]"
                    },
                    "dnsZoneGroupId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('privateDnsZoneName'))).outputs.dnsZoneGroupId.value]"
                    },
                    "vnetLinksId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('privateDnsZoneName'))).outputs.vnetLinksLink.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_saapimcsbackend_name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[variables('privateEndpoint_storageaccount_table_Name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpointName": {
                    "value": "[variables('privateEndpoint_storageaccount_table_Name')]"
                  },
                  "privateDnsZoneName": {
                    "value": "tableDnsZone"
                  },
                  "storageAcountName": {
                    "value": "[variables('storageAccounts_saapimcsbackend_name')]"
                  },
                  "groupId": {
                    "value": "table"
                  },
                  "storageAccountId": {
                    "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_saapimcsbackend_name'))]"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "vnetRG": {
                    "value": "[parameters('vnetRG')]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetid')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.8.9.13224",
                      "templateHash": "16689497214647873263"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string"
                    },
                    "groupId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "vnetName": {
                      "type": "string"
                    },
                    "vnetRG": {
                      "type": "string"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "storageAccountId": {
                      "type": "string"
                    },
                    "privateDnsZoneName": {
                      "type": "string"
                    },
                    "storageAcountName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('storageAccountId')]",
                              "groupIds": [
                                "[parameters('groupId')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('privateDnsZoneName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "vnetRG": {
                            "value": "[parameters('vnetRG')]"
                          },
                          "groupId": {
                            "value": "[parameters('groupId')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('privateEndpointName')]"
                          },
                          "storageName": {
                            "value": "[parameters('storageAcountName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.8.9.13224",
                              "templateHash": "11295774772507740412"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string"
                            },
                            "vnetRG": {
                              "type": "string"
                            },
                            "privateEndpointName": {
                              "type": "string"
                            },
                            "groupId": {
                              "type": "string"
                            },
                            "storageName": {
                              "type": "string"
                            },
                            "standardDomain": {
                              "type": "string",
                              "defaultValue": "windows.net"
                            },
                            "domain": {
                              "type": "string",
                              "defaultValue": "[format('privatelink.{0}.core.{1}', parameters('groupId'), parameters('standardDomain'))]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('domain')]",
                              "location": "global"
                            },
                            {
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))))]",
                              "location": "global",
                              "properties": {
                                "virtualNetwork": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                                },
                                "registrationEnabled": false
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-03-01",
                              "name": "[format('{0}/default', parameters('privateEndpointName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[format('{0}-{1}-core-windows-net', parameters('storageName'), parameters('groupId'))]",
                                    "properties": {
                                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]",
                                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[0], split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[1])]"
                              ]
                            }
                          ],
                          "outputs": {
                            "dnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]"
                            },
                            "vnetLinksLink": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[0], split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[1])]"
                            },
                            "dnsZoneGroupId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', split(format('{0}/default', parameters('privateEndpointName')), '/')[0], split(format('{0}/default', parameters('privateEndpointName')), '/')[1])]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('privateDnsZoneName'))).outputs.dnsZoneId.value]"
                    },
                    "dnsZoneGroupId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('privateDnsZoneName'))).outputs.dnsZoneGroupId.value]"
                    },
                    "vnetLinksId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('privateDnsZoneName'))).outputs.vnetLinksLink.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_saapimcsbackend_name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[variables('privateEndpoint_storageaccount_file_Name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpointName": {
                    "value": "[variables('privateEndpoint_storageaccount_file_Name')]"
                  },
                  "privateDnsZoneName": {
                    "value": "fileDnsZone"
                  },
                  "storageAcountName": {
                    "value": "[variables('storageAccounts_saapimcsbackend_name')]"
                  },
                  "groupId": {
                    "value": "file"
                  },
                  "storageAccountId": {
                    "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_saapimcsbackend_name'))]"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "vnetRG": {
                    "value": "[parameters('vnetRG')]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetid')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.8.9.13224",
                      "templateHash": "16689497214647873263"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string"
                    },
                    "groupId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "vnetName": {
                      "type": "string"
                    },
                    "vnetRG": {
                      "type": "string"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "storageAccountId": {
                      "type": "string"
                    },
                    "privateDnsZoneName": {
                      "type": "string"
                    },
                    "storageAcountName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('storageAccountId')]",
                              "groupIds": [
                                "[parameters('groupId')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('privateDnsZoneName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "vnetRG": {
                            "value": "[parameters('vnetRG')]"
                          },
                          "groupId": {
                            "value": "[parameters('groupId')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('privateEndpointName')]"
                          },
                          "storageName": {
                            "value": "[parameters('storageAcountName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.8.9.13224",
                              "templateHash": "11295774772507740412"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string"
                            },
                            "vnetRG": {
                              "type": "string"
                            },
                            "privateEndpointName": {
                              "type": "string"
                            },
                            "groupId": {
                              "type": "string"
                            },
                            "storageName": {
                              "type": "string"
                            },
                            "standardDomain": {
                              "type": "string",
                              "defaultValue": "windows.net"
                            },
                            "domain": {
                              "type": "string",
                              "defaultValue": "[format('privatelink.{0}.core.{1}', parameters('groupId'), parameters('standardDomain'))]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('domain')]",
                              "location": "global"
                            },
                            {
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))))]",
                              "location": "global",
                              "properties": {
                                "virtualNetwork": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                                },
                                "registrationEnabled": false
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-03-01",
                              "name": "[format('{0}/default', parameters('privateEndpointName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[format('{0}-{1}-core-windows-net', parameters('storageName'), parameters('groupId'))]",
                                    "properties": {
                                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]",
                                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[0], split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[1])]"
                              ]
                            }
                          ],
                          "outputs": {
                            "dnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('domain'))]"
                            },
                            "vnetLinksLink": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[0], split(format('{0}/{1}', parameters('domain'), uniqueString(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))), '/')[1])]"
                            },
                            "dnsZoneGroupId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', split(format('{0}/default', parameters('privateEndpointName')), '/')[0], split(format('{0}/default', parameters('privateEndpointName')), '/')[1])]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('privateDnsZoneName'))).outputs.dnsZoneId.value]"
                    },
                    "dnsZoneGroupId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('privateDnsZoneName'))).outputs.dnsZoneGroupId.value]"
                    },
                    "vnetLinksId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('privateDnsZoneName'))).outputs.vnetLinksLink.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccounts_saapimcsbackend_name'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('backendResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('networkingResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "sharedresources",
      "resourceGroup": "[variables('sharedResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "accountName": {
            "value": "[parameters('accountName')]"
          },
          "CICDAgentSubnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')).outputs.CICDAgentSubnetId.value]"
          },
          "CICDAgentType": {
            "value": "[parameters('CICDAgentType')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "jumpboxSubnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')).outputs.jumpBoxSubnetid.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "personalAccessToken": {
            "value": "[parameters('personalAccessToken')]"
          },
          "resourceGroupName": {
            "value": "[variables('sharedResourceGroupName')]"
          },
          "resourceSuffix": {
            "value": "[variables('resourceSuffix')]"
          },
          "vmPassword": {
            "value": "[parameters('vmPassword')]"
          },
          "vmUsername": {
            "value": "[parameters('vmUsername')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.8.9.13224",
              "templateHash": "8742964082395272851"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure location to which the resources are to be deployed"
              }
            },
            "jumpboxSubnetId": {
              "type": "string",
              "metadata": {
                "description": "The full id string identifying the target subnet for the jumpbox VM"
              }
            },
            "CICDAgentSubnetId": {
              "type": "string",
              "metadata": {
                "description": "The full id string identifying the target subnet for the CI/CD Agent VM"
              }
            },
            "vmUsername": {
              "type": "string",
              "metadata": {
                "description": "The user name to be used as the Administrator for all VMs created by this deployment"
              }
            },
            "vmPassword": {
              "type": "string",
              "metadata": {
                "description": "The password for the Administrator user for all VMs created by this deployment"
              }
            },
            "CICDAgentType": {
              "type": "string",
              "allowedValues": [
                "github",
                "azuredevops",
                "none"
              ],
              "metadata": {
                "description": "The CI/CD platform to be used, and for which an agent will be configured for the ASE deployment. Specify 'none' if no agent needed"
              }
            },
            "accountName": {
              "type": "string",
              "metadata": {
                "description": "The Azure DevOps or GitHub account name to be used when configuring the CI/CD agent, in the format https://dev.azure.com/ORGNAME OR github.com/ORGUSERNAME OR none"
              }
            },
            "personalAccessToken": {
              "type": "secureString",
              "metadata": {
                "description": "The Azure DevOps or GitHub personal access token (PAT) used to setup the CI/CD agent"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the shared resource group"
              }
            },
            "resourceSuffix": {
              "type": "string",
              "metadata": {
                "description": "Standardized suffix text to be added to resource names"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "uat",
                "prod",
                "dr"
              ],
              "metadata": {
                "description": "The environment for which the deployment is being executed"
              }
            }
          },
          "variables": {
            "tempKeyVaultName": "[take(format('kv-{0}', parameters('resourceSuffix')), 24)]",
            "keyVaultName": "[if(endsWith(variables('tempKeyVaultName'), '-'), substring(variables('tempKeyVaultName'), 0, sub(length(variables('tempKeyVaultName')), 1)), variables('tempKeyVaultName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2019-09-01",
              "name": "[variables('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "accessPolicies": []
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "azmon",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "resourceSuffix": {
                    "value": "[parameters('resourceSuffix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.8.9.13224",
                      "templateHash": "11401272575743671340"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure location to which the resources are to be deployed"
                      }
                    },
                    "resourceSuffix": {
                      "type": "string",
                      "metadata": {
                        "description": "Standardized suffix text to be added to resource names"
                      }
                    }
                  },
                  "variables": {
                    "appInsightsName": "[format('appi-{0}', parameters('resourceSuffix'))]",
                    "logAnalyticsWorkspaceName": "[format('log-{0}', parameters('resourceSuffix'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[variables('logAnalyticsWorkspaceName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "retentionInDays": 30,
                        "features": {
                          "searchVersion": 1
                        },
                        "sku": {
                          "name": "PerGB2018"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[variables('appInsightsName')]",
                      "location": "[parameters('location')]",
                      "kind": "web",
                      "properties": {
                        "Application_Type": "web",
                        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "appInsightsConnectionString": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).ConnectionString]"
                    },
                    "appInsightsName": {
                      "type": "string",
                      "value": "[variables('appInsightsName')]"
                    },
                    "appInsightsId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
                    },
                    "appInsightsInstrumentationKey": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[not(equals(toLower(parameters('CICDAgentType')), 'none'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "devopsvm",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "subnetId": {
                    "value": "[parameters('CICDAgentSubnetId')]"
                  },
                  "username": {
                    "value": "[parameters('vmUsername')]"
                  },
                  "password": {
                    "value": "[parameters('vmPassword')]"
                  },
                  "vmName": {
                    "value": "[format('{0}-{1}', parameters('CICDAgentType'), parameters('environment'))]"
                  },
                  "accountName": {
                    "value": "[parameters('accountName')]"
                  },
                  "personalAccessToken": {
                    "value": "[parameters('personalAccessToken')]"
                  },
                  "CICDAgentType": {
                    "value": "[parameters('CICDAgentType')]"
                  },
                  "deployAgent": {
                    "value": true
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.8.9.13224",
                      "templateHash": "3225679958175003679"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure location to which the resources are to be deployed"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The full id string identifying the target subnet for the VM"
                      }
                    },
                    "osDiskType": {
                      "type": "string",
                      "defaultValue": "Standard_LRS",
                      "metadata": {
                        "description": "Disk type of the IS disk"
                      }
                    },
                    "vmSize": {
                      "type": "string",
                      "defaultValue": "Standard_D4_v3",
                      "metadata": {
                        "description": "Valid SKU indicator for the VM"
                      }
                    },
                    "username": {
                      "type": "string",
                      "metadata": {
                        "description": "The user name to be used as the Administrator for all VMs created by this deployment"
                      }
                    },
                    "password": {
                      "type": "string",
                      "metadata": {
                        "description": "The password for the Administrator user for all VMs created by this deployment"
                      }
                    },
                    "windowsOSVersion": {
                      "type": "string",
                      "defaultValue": "2016-Datacenter",
                      "metadata": {
                        "description": "Windows OS Version indicator"
                      }
                    },
                    "vmName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the VM to be created"
                      }
                    },
                    "deployAgent": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Indicator to guide whether the CI/CD agent script should be run or not"
                      }
                    },
                    "accountName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The Azure DevOps or GitHub account name"
                      }
                    },
                    "personalAccessToken": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The personal access token to connect to Azure DevOps or Github"
                      }
                    },
                    "poolName": {
                      "type": "string",
                      "defaultValue": "Default",
                      "metadata": {
                        "description": "The name Azure DevOps or GitHub pool for this build agent to join. Use 'Default' if you don't have a separate pool."
                      }
                    },
                    "CICDAgentType": {
                      "type": "string",
                      "allowedValues": [
                        "github",
                        "azuredevops",
                        "none"
                      ],
                      "metadata": {
                        "description": "The CI/CD platform to be used, and for which an agent will be configured for the ASE deployment. Specify 'none' if no agent needed"
                      }
                    },
                    "artifactsLocation": {
                      "type": "string",
                      "defaultValue": "https://raw.githubusercontent.com/Azure/apim-landing-zone-accelerator/main/reference-implementations/AppGW-IAPIM-Func/bicep/shared/agentsetup.ps1",
                      "metadata": {
                        "description": "The base URI where the CI/CD agent artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
                      }
                    }
                  },
                  "variables": {
                    "AgentName": "[format('agent-{0}', parameters('vmName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[parameters('vmName')]",
                      "location": "[parameters('location')]",
                      "zones": [
                        "1"
                      ],
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "storageProfile": {
                          "osDisk": {
                            "name": "[format('{0}-osdisk', parameters('vmName'))]",
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "[parameters('osDiskType')]"
                            }
                          },
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "[parameters('windowsOSVersion')]",
                            "version": "latest"
                          }
                        },
                        "osProfile": {
                          "computerName": "[parameters('vmName')]",
                          "adminUsername": "[parameters('username')]",
                          "adminPassword": "[parameters('password')]"
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-nic', parameters('vmName')))).outputs.nicId.value]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-nic', parameters('vmName')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('deployAgent')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), 'CustomScript')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "settings": {
                          "fileUris": [
                            "[parameters('artifactsLocation')]"
                          ]
                        },
                        "protectedSettings": {
                          "commandToExecute": "[format('powershell.exe -ExecutionPolicy Unrestricted -Command ./agentsetup.ps1 -url {0} -pat {1} -agent {2} -pool {3} -agenttype {4} ', parameters('accountName'), parameters('personalAccessToken'), variables('AgentName'), parameters('poolName'), parameters('CICDAgentType'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-nic', parameters('vmName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "subnetId": {
                            "value": "[parameters('subnetId')]"
                          },
                          "nicName": {
                            "value": "[format('{0}-nic', parameters('vmName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.8.9.13224",
                              "templateHash": "8768651758243039362"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Azure location to which the resources are to be deployed"
                              }
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "Id of the subnet within which the VM must be created"
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "defaultValue": "10.0.0.4",
                              "metadata": {
                                "description": "The private IP address to associated with this VM"
                              }
                            },
                            "nicName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Network Interface to be created"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('nicName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateIPAddress": "[parameters('privateIPAddress')]",
                                      "privateIPAllocationMethod": "Dynamic",
                                      "subnet": {
                                        "id": "[parameters('subnetId')]"
                                      },
                                      "primary": true,
                                      "privateIPAddressVersion": "IPv4"
                                    }
                                  }
                                ],
                                "dnsSettings": {
                                  "dnsServers": []
                                },
                                "enableAcceleratedNetworking": false,
                                "enableIPForwarding": false
                              }
                            }
                          ],
                          "outputs": {
                            "nicId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "vm-jumpbox",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "subnetId": {
                    "value": "[parameters('jumpboxSubnetId')]"
                  },
                  "username": {
                    "value": "[parameters('vmUsername')]"
                  },
                  "password": {
                    "value": "[parameters('vmPassword')]"
                  },
                  "CICDAgentType": {
                    "value": "[parameters('CICDAgentType')]"
                  },
                  "vmName": {
                    "value": "[format('jumpbox-{0}', parameters('environment'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.8.9.13224",
                      "templateHash": "3225679958175003679"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure location to which the resources are to be deployed"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The full id string identifying the target subnet for the VM"
                      }
                    },
                    "osDiskType": {
                      "type": "string",
                      "defaultValue": "Standard_LRS",
                      "metadata": {
                        "description": "Disk type of the IS disk"
                      }
                    },
                    "vmSize": {
                      "type": "string",
                      "defaultValue": "Standard_D4_v3",
                      "metadata": {
                        "description": "Valid SKU indicator for the VM"
                      }
                    },
                    "username": {
                      "type": "string",
                      "metadata": {
                        "description": "The user name to be used as the Administrator for all VMs created by this deployment"
                      }
                    },
                    "password": {
                      "type": "string",
                      "metadata": {
                        "description": "The password for the Administrator user for all VMs created by this deployment"
                      }
                    },
                    "windowsOSVersion": {
                      "type": "string",
                      "defaultValue": "2016-Datacenter",
                      "metadata": {
                        "description": "Windows OS Version indicator"
                      }
                    },
                    "vmName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the VM to be created"
                      }
                    },
                    "deployAgent": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Indicator to guide whether the CI/CD agent script should be run or not"
                      }
                    },
                    "accountName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The Azure DevOps or GitHub account name"
                      }
                    },
                    "personalAccessToken": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The personal access token to connect to Azure DevOps or Github"
                      }
                    },
                    "poolName": {
                      "type": "string",
                      "defaultValue": "Default",
                      "metadata": {
                        "description": "The name Azure DevOps or GitHub pool for this build agent to join. Use 'Default' if you don't have a separate pool."
                      }
                    },
                    "CICDAgentType": {
                      "type": "string",
                      "allowedValues": [
                        "github",
                        "azuredevops",
                        "none"
                      ],
                      "metadata": {
                        "description": "The CI/CD platform to be used, and for which an agent will be configured for the ASE deployment. Specify 'none' if no agent needed"
                      }
                    },
                    "artifactsLocation": {
                      "type": "string",
                      "defaultValue": "https://raw.githubusercontent.com/Azure/apim-landing-zone-accelerator/main/reference-implementations/AppGW-IAPIM-Func/bicep/shared/agentsetup.ps1",
                      "metadata": {
                        "description": "The base URI where the CI/CD agent artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
                      }
                    }
                  },
                  "variables": {
                    "AgentName": "[format('agent-{0}', parameters('vmName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[parameters('vmName')]",
                      "location": "[parameters('location')]",
                      "zones": [
                        "1"
                      ],
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "storageProfile": {
                          "osDisk": {
                            "name": "[format('{0}-osdisk', parameters('vmName'))]",
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "[parameters('osDiskType')]"
                            }
                          },
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "[parameters('windowsOSVersion')]",
                            "version": "latest"
                          }
                        },
                        "osProfile": {
                          "computerName": "[parameters('vmName')]",
                          "adminUsername": "[parameters('username')]",
                          "adminPassword": "[parameters('password')]"
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-nic', parameters('vmName')))).outputs.nicId.value]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-nic', parameters('vmName')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('deployAgent')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), 'CustomScript')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "settings": {
                          "fileUris": [
                            "[parameters('artifactsLocation')]"
                          ]
                        },
                        "protectedSettings": {
                          "commandToExecute": "[format('powershell.exe -ExecutionPolicy Unrestricted -Command ./agentsetup.ps1 -url {0} -pat {1} -agent {2} -pool {3} -agenttype {4} ', parameters('accountName'), parameters('personalAccessToken'), variables('AgentName'), parameters('poolName'), parameters('CICDAgentType'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-nic', parameters('vmName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "subnetId": {
                            "value": "[parameters('subnetId')]"
                          },
                          "nicName": {
                            "value": "[format('{0}-nic', parameters('vmName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.8.9.13224",
                              "templateHash": "8768651758243039362"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Azure location to which the resources are to be deployed"
                              }
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "Id of the subnet within which the VM must be created"
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "defaultValue": "10.0.0.4",
                              "metadata": {
                                "description": "The private IP address to associated with this VM"
                              }
                            },
                            "nicName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Network Interface to be created"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('nicName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateIPAddress": "[parameters('privateIPAddress')]",
                                      "privateIPAllocationMethod": "Dynamic",
                                      "subnet": {
                                        "id": "[parameters('subnetId')]"
                                      },
                                      "primary": true,
                                      "privateIPAddressVersion": "IPv4"
                                    }
                                  }
                                ],
                                "dnsSettings": {
                                  "dnsServers": []
                                },
                                "enableAcceleratedNetworking": false,
                                "enableIPForwarding": false
                              }
                            }
                          ],
                          "outputs": {
                            "nicId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "appInsightsConnectionString": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'azmon')).outputs.appInsightsConnectionString.value]"
            },
            "CICDAgentVmName": {
              "type": "string",
              "value": "devopsvm"
            },
            "jumpBoxvmName": {
              "type": "string",
              "value": "vm-jumpbox"
            },
            "appInsightsName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'azmon')).outputs.appInsightsName.value]"
            },
            "appInsightsId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'azmon')).outputs.appInsightsId.value]"
            },
            "appInsightsInstrumentationKey": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'azmon')).outputs.appInsightsInstrumentationKey.value]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[variables('keyVaultName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('sharedResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "apimDeploy",
      "resourceGroup": "[variables('apimResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "apimName": {
            "value": "[variables('apimName')]"
          },
          "apimSubnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')).outputs.apimSubnetid.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "appInsightsName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('sharedResourceGroupName')), 'Microsoft.Resources/deployments', 'sharedresources')).outputs.appInsightsName.value]"
          },
          "appInsightsId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('sharedResourceGroupName')), 'Microsoft.Resources/deployments', 'sharedresources')).outputs.appInsightsId.value]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('sharedResourceGroupName')), 'Microsoft.Resources/deployments', 'sharedresources')).outputs.appInsightsInstrumentationKey.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.8.9.13224",
              "templateHash": "3190909563728576407"
            }
          },
          "parameters": {
            "apimName": {
              "type": "string",
              "metadata": {
                "description": "The name of the API Management resource to be created."
              }
            },
            "apimSubnetId": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The subnet resource id to use for APIM."
              }
            },
            "publisherEmail": {
              "type": "string",
              "defaultValue": "apim@contoso.com",
              "minLength": 1,
              "metadata": {
                "description": "The email address of the publisher of the APIM resource."
              }
            },
            "publisherName": {
              "type": "string",
              "defaultValue": "Contoso",
              "minLength": 1,
              "metadata": {
                "description": "Company name of the publisher of the APIM resource."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Developer",
              "metadata": {
                "description": "The pricing tier of the APIM resource."
              }
            },
            "capacity": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "The instance size of the APIM resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for Azure resources."
              }
            },
            "appInsightsName": {
              "type": "string"
            },
            "appInsightsId": {
              "type": "string"
            },
            "appInsightsInstrumentationKey": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2020-12-01",
              "name": "[parameters('apimName')]",
              "location": "[parameters('location')]",
              "sku": {
                "capacity": "[parameters('capacity')]",
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "virtualNetworkType": "Internal",
                "publisherEmail": "[parameters('publisherEmail')]",
                "publisherName": "[parameters('publisherName')]",
                "virtualNetworkConfiguration": {
                  "subnetResourceId": "[parameters('apimSubnetId')]"
                }
              }
            },
            {
              "type": "Microsoft.ApiManagement/service/loggers",
              "apiVersion": "2019-01-01",
              "name": "[format('{0}/{1}', parameters('apimName'), parameters('appInsightsName'))]",
              "properties": {
                "loggerType": "applicationInsights",
                "resourceId": "[parameters('appInsightsId')]",
                "credentials": {
                  "instrumentationKey": "[parameters('appInsightsInstrumentationKey')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/diagnostics",
              "apiVersion": "2019-01-01",
              "name": "[format('{0}/{1}', parameters('apimName'), 'applicationinsights')]",
              "properties": {
                "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('apimName'), parameters('appInsightsName'))]",
                "alwaysLog": "allErrors",
                "sampling": {
                  "percentage": 100,
                  "samplingType": "fixed"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('apimName'), parameters('appInsightsName'))]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('apimResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('sharedResourceGroupName')), 'Microsoft.Resources/deployments', 'sharedresources')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "apimDnsZoneDeploy",
      "resourceGroup": "[variables('sharedResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')).outputs.apimCSVNetName.value]"
          },
          "vnetRG": {
            "value": "[variables('networkingResourceGroupName')]"
          },
          "apimName": {
            "value": "[variables('apimName')]"
          },
          "apimRG": {
            "value": "[variables('apimResourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.8.9.13224",
              "templateHash": "12185786395477240405"
            }
          },
          "parameters": {
            "vnetName": {
              "type": "string"
            },
            "vnetRG": {
              "type": "string"
            },
            "apimName": {
              "type": "string"
            },
            "apimRG": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "azure-api.net",
              "location": "global",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "portal.azure-api.net",
              "location": "global",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "developer.azure-api.net",
              "location": "global",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "management.azure-api.net",
              "location": "global",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "scm.azure-api.net",
              "location": "global",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('azure-api.net/{0}', parameters('apimName'))]",
              "properties": {
                "aRecords": [
                  {
                    "ipv4Address": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('apimRG')), 'Microsoft.ApiManagement/service', parameters('apimName')), '2020-12-01').privateIPAddresses[0]]"
                  }
                ],
                "ttl": 36000
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'azure-api.net')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('portal.azure-api.net/{0}', parameters('apimName'))]",
              "properties": {
                "aRecords": [
                  {
                    "ipv4Address": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('apimRG')), 'Microsoft.ApiManagement/service', parameters('apimName')), '2020-12-01').privateIPAddresses[0]]"
                  }
                ],
                "ttl": 36000
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'portal.azure-api.net')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('developer.azure-api.net/{0}', parameters('apimName'))]",
              "properties": {
                "aRecords": [
                  {
                    "ipv4Address": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('apimRG')), 'Microsoft.ApiManagement/service', parameters('apimName')), '2020-12-01').privateIPAddresses[0]]"
                  }
                ],
                "ttl": 36000
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'developer.azure-api.net')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('management.azure-api.net/{0}', parameters('apimName'))]",
              "properties": {
                "aRecords": [
                  {
                    "ipv4Address": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('apimRG')), 'Microsoft.ApiManagement/service', parameters('apimName')), '2020-12-01').privateIPAddresses[0]]"
                  }
                ],
                "ttl": 36000
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'management.azure-api.net')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('scm.azure-api.net/{0}', parameters('apimName'))]",
              "properties": {
                "aRecords": [
                  {
                    "ipv4Address": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('apimRG')), 'Microsoft.ApiManagement/service', parameters('apimName')), '2020-12-01').privateIPAddresses[0]]"
                  }
                ],
                "ttl": 36000
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'scm.azure-api.net')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "azure-api.net/gateway-vnet-dns-link",
              "location": "global",
              "properties": {
                "registrationEnabled": true,
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'azure-api.net')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "portal.azure-api.net/gateway-vnet-dns-link",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'portal.azure-api.net')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "developer.azure-api.net/gateway-vnet-dns-link",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'developer.azure-api.net')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "management.azure-api.net/gateway-vnet-dns-link",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'management.azure-api.net')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "scm.azure-api.net/gateway-vnet-dns-link",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetRG')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'scm.azure-api.net')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('apimResourceGroupName')), 'Microsoft.Resources/deployments', 'apimDeploy')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('apimResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('networkingResourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('sharedResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "appgwDeploy",
      "resourceGroup": "[variables('apimResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appGatewayName": {
            "value": "[variables('appGatewayName')]"
          },
          "appGatewayFQDN": {
            "value": "[parameters('appGatewayFqdn')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "appGatewaySubnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')).outputs.appGatewaySubnetid.value]"
          },
          "primaryBackendEndFQDN": {
            "value": "[format('{0}.azure-api.net', variables('apimName'))]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('sharedResourceGroupName')), 'Microsoft.Resources/deployments', 'sharedresources')).outputs.keyVaultName.value]"
          },
          "keyVaultResourceGroupName": {
            "value": "[variables('sharedResourceGroupName')]"
          },
          "appGatewayCertType": {
            "value": "[parameters('appGatewayCertType')]"
          },
          "certPassword": {
            "value": "[parameters('certificatePassword')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.8.9.13224",
              "templateHash": "1594842494905926831"
            }
          },
          "parameters": {
            "appGatewayName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Application Gateawy to be created."
              }
            },
            "appGatewayFQDN": {
              "type": "string",
              "defaultValue": "api.example.com",
              "metadata": {
                "description": "The FQDN of the Application Gateawy.Must match the TLS Certificate."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the Application Gateawy to be created"
              }
            },
            "appGatewaySubnetId": {
              "type": "string",
              "metadata": {
                "description": "The subnet resource id to use for Application Gateway."
              }
            },
            "appGatewayCertType": {
              "type": "string",
              "metadata": {
                "description": "Set to selfsigned if self signed certificates should be used for the Application Gateway. Set to custom and copy the pfx file to deployment/bicep/gateway/certs/appgw.pfx if custom certificates are to be used"
              }
            },
            "primaryBackendEndFQDN": {
              "type": "string",
              "defaultValue": "api-internal.example.com",
              "metadata": {
                "description": "The backend URL of the APIM."
              }
            },
            "probeUrl": {
              "type": "string",
              "defaultValue": "/status-0123456789abcdef",
              "metadata": {
                "description": "The Url for the Application Gateway Health Probe."
              }
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultResourceGroupName": {
              "type": "string"
            },
            "certPassword": {
              "type": "secureString"
            }
          },
          "variables": {
            "appGatewayPrimaryPip": "[format('pip-{0}', parameters('appGatewayName'))]",
            "appGatewayIdentityId": "[format('identity-{0}', parameters('appGatewayName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[variables('appGatewayIdentityId')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2019-09-01",
              "name": "[variables('appGatewayPrimaryPip')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static"
              }
            },
            {
              "type": "Microsoft.Network/applicationGateways",
              "apiVersion": "2019-09-01",
              "name": "[parameters('appGatewayName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('appGatewayIdentityId')))]": {}
                }
              },
              "properties": {
                "sku": {
                  "name": "WAF_v2",
                  "tier": "WAF_v2"
                },
                "gatewayIPConfigurations": [
                  {
                    "name": "appGatewayIpConfig",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('appGatewaySubnetId')]"
                      }
                    }
                  }
                ],
                "sslCertificates": [
                  {
                    "name": "[parameters('appGatewayFQDN')]",
                    "properties": {
                      "keyVaultSecretId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroupName')), 'Microsoft.Resources/deployments', 'certificate')).outputs.secretUri.value]"
                    }
                  }
                ],
                "sslPolicy": {
                  "minProtocolVersion": "TLSv1_2",
                  "policyType": "Custom",
                  "cipherSuites": [
                    "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                    "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                    "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                    "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
                    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
                  ]
                },
                "trustedRootCertificates": [],
                "frontendIPConfigurations": [
                  {
                    "name": "appGwPublicFrontendIp",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('appGatewayPrimaryPip'))]"
                      }
                    }
                  }
                ],
                "frontendPorts": [
                  {
                    "name": "port_80",
                    "properties": {
                      "port": 80
                    }
                  },
                  {
                    "name": "port_443",
                    "properties": {
                      "port": 443
                    }
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "apim",
                    "properties": {
                      "backendAddresses": [
                        {
                          "fqdn": "[parameters('primaryBackendEndFQDN')]"
                        }
                      ]
                    }
                  }
                ],
                "backendHttpSettingsCollection": [
                  {
                    "name": "default",
                    "properties": {
                      "port": 80,
                      "protocol": "Http",
                      "cookieBasedAffinity": "Disabled",
                      "pickHostNameFromBackendAddress": false,
                      "affinityCookieName": "ApplicationGatewayAffinity",
                      "requestTimeout": 20
                    }
                  },
                  {
                    "name": "https",
                    "properties": {
                      "port": 443,
                      "protocol": "Https",
                      "cookieBasedAffinity": "Disabled",
                      "hostName": "[parameters('primaryBackendEndFQDN')]",
                      "pickHostNameFromBackendAddress": false,
                      "requestTimeout": 20,
                      "probe": {
                        "id": "[format('{0}/probes/APIM', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))]"
                      }
                    }
                  }
                ],
                "httpListeners": [
                  {
                    "name": "default",
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[format('{0}/frontendIPConfigurations/appGwPublicFrontendIp', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))]"
                      },
                      "frontendPort": {
                        "id": "[format('{0}/frontendPorts/port_80', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))]"
                      },
                      "protocol": "Http",
                      "hostnames": [],
                      "requireServerNameIndication": false
                    }
                  },
                  {
                    "name": "https",
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[format('{0}/frontendIPConfigurations/appGwPublicFrontendIp', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))]"
                      },
                      "frontendPort": {
                        "id": "[format('{0}/frontendPorts/port_443', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))]"
                      },
                      "protocol": "Https",
                      "sslCertificate": {
                        "id": "[format('{0}/sslCertificates/{1}', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), parameters('appGatewayFQDN'))]"
                      },
                      "hostnames": [],
                      "requireServerNameIndication": false
                    }
                  }
                ],
                "urlPathMaps": [],
                "requestRoutingRules": [
                  {
                    "name": "apim",
                    "properties": {
                      "ruleType": "Basic",
                      "httpListener": {
                        "id": "[format('{0}/httpListeners/https', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))]"
                      },
                      "backendAddressPool": {
                        "id": "[format('{0}/backendAddressPools/apim', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))]"
                      },
                      "backendHttpSettings": {
                        "id": "[format('{0}/backendHttpSettingsCollection/https', resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')))]"
                      }
                    }
                  }
                ],
                "probes": [
                  {
                    "name": "APIM",
                    "properties": {
                      "protocol": "Https",
                      "host": "[parameters('primaryBackendEndFQDN')]",
                      "path": "[parameters('probeUrl')]",
                      "interval": 30,
                      "timeout": 30,
                      "unhealthyThreshold": 3,
                      "pickHostNameFromBackendHttpSettings": false,
                      "minServers": 0,
                      "match": {
                        "statusCodes": [
                          "200-399"
                        ]
                      }
                    }
                  }
                ],
                "rewriteRuleSets": [],
                "redirectConfigurations": [],
                "webApplicationFirewallConfiguration": {
                  "enabled": true,
                  "firewallMode": "Detection",
                  "ruleSetType": "OWASP",
                  "ruleSetVersion": "3.0",
                  "disabledRuleGroups": [],
                  "requestBodyCheck": true,
                  "maxRequestBodySizeInKb": 128,
                  "fileUploadLimitInMb": 100
                },
                "enableHttp2": true,
                "autoscaleConfiguration": {
                  "minCapacity": 2,
                  "maxCapacity": 3
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('appGatewayIdentityId'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('appGatewayPrimaryPip'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('keyVaultResourceGroupName')), 'Microsoft.Resources/deployments', 'certificate')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "certificate",
              "resourceGroup": "[parameters('keyVaultResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "managedIdentity": {
                    "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('appGatewayIdentityId')), '2018-11-30', 'full')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "appGatewayFQDN": {
                    "value": "[parameters('appGatewayFQDN')]"
                  },
                  "appGatewayCertType": {
                    "value": "[parameters('appGatewayCertType')]"
                  },
                  "certPassword": {
                    "value": "[parameters('certPassword')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.8.9.13224",
                      "templateHash": "12630983102141026802"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string"
                    },
                    "managedIdentity": {
                      "type": "object"
                    },
                    "location": {
                      "type": "string"
                    },
                    "appGatewayFQDN": {
                      "type": "string"
                    },
                    "certPassword": {
                      "type": "secureString"
                    },
                    "appGatewayCertType": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "$fxv#0": "MIIKaQIBAzCCCiUGCSqGSIb3DQEHAaCCChYEggoSMIIKDjCCBg8GCSqGSIb3DQEHAaCCBgAEggX8MIIF+DCCBfQGCyqGSIb3DQEMCgECoIIE/jCCBPowHAYKKoZIhvcNAQwBAzAOBAjcpXnphmL/MgICB9AEggTY553f4WeIcfU2M3BNiFNSWQd0FcnWYuJLoFHu75pMigYtV8EdAaOOn5umqXWg2SJGZJKXLM1SSDqwt0o0loZo8YwWSG0Q8uMqokzSzOOcx4neDq1rDg8mJ4xjGAnpPtB7ZYhv3yVgAuDj6KhDov+00WLC4J6/Dr6hiwn7tAN36MF+LDgTZzSS70YEY4kPHKiSj7q2RDsUWmITNNOIXjANs+uZsPZEY1/a7NSZJrrI73UL3KJyk9dvXLGQ5PQ6oDDvQrqhlI1mt3E1m5UMLOMjDi6NpBmFPOWJDmXW6mWO/fjn9Iech+8ngUWD4a3l+dUb5CpJy5xjxwpgzJpg0Biv4IvmSQhxgKttueW1yCgBV1dQ5A0zrMOifgs1ZDWYRRhESilQ7jg5XSNPKGSshzhHizSWCfG0VZR6qWRTwhL94UBdGxyG3ECMCSZbfiyzaQ+i7hRVXwab4ADbtug/zkbwAADekehu6Jdq8cas9oXg+3UeYlEaQIj1+MCl2TCNlYk9ZhW93LDp4OB2caB5aAo1cQX/69EbiVVyeNxe3GfmSGf1BpIs2ljtWlt0oFEd45z/0NuF0maL3G8LXfW2d/qR43WvInrdTBPumNyoVbD4P7RKX7LiQYlotQuqJDRIYA2rqGyuDzrMScVyo6TFOT0yDYR4xYrs6L2ZAoVmh0zfbg4WLZ8gKxPpO6qoETPKt609+Uu0SIbkgHjdv/sRlV5OvuJ1lri4eE85tCEbqVlLyxBRY2KVkkH/3y4gEsgsuUfIHg2g+SlcUKTD9ZyOTg0IxTu21QvpY0BZCkHmrnqxjz2neFrSbJDCwfaT7gF5l+ajSLvO7JO8winaJh7Ld6FKfWpQYNqxdQED2sALtpcYArvB3PUz8OkKZAIGmqTauF9AuhNNwxK15IhHbZMoDrMQ0McGyVbwIRXSnbOZcbdo1qQFR3Po92FnhFTjmbP9dEzV4mNWMPYYauk/L7/KqCyLLJ5SD2lBophcLDa5vX7hKGNdFcS4n8m1iM+pt7/09Tb/NtL9mxwET4rN0uzqzinwKtH9hJtbP18jUA6JQmLilSycb2/C1wX3CeXxD87J//SsQtEEL6n7niITo0sM87NHrEZOwLHUwFiW544Lb066L2xN8XGFJWq+aCYpnO0cu/XYSmkjyXcTy9LCla7otJpFe+vcFzVK62jJgNAHXXx5Jw8Q+lJpZ4K34T7hY/E5OJ13M/Dskp8ijsByV8jWBnDgUhu7YA8f/hunzXcOajypj2QD0rEjjBzAIM6d7fRVPeLePwMg19GpUo7hiR6SX5CdFRi8aiq4gQsEbXxmuqb4UYFfNhYkOwv64RcH3cCFlpgdOvisZRtpGWSfiknpzLoPxtlbbTC1lcm5uNYDZUQ8Jt820xpbmOtvt4Y0pUL4IR9irFzEEYgL0OdmhuXI3gOm443TRzGpEMzQ2Shue02/aQ9fr+SQ1UaCEu7VJA+rVhOqSBG2VgQZc0aVeanJFKr6XyqUYyuHDlL5ieRn/ULOpYW5Y/4HdoLuE4zLTGpnsBR5t2SbibtYxMsi908hxOpSdCupQ0C1ONshs8bnsD1XankBTY1v6n5JiFFYeSqNyMQpGhIj1IAsKu/oAHYnXQJL0mpf8duFJJK99ePX8j6RQD2Us9BnukuaXTGB4jANBgkrBgEEAYI3EQIxADATBgkqhkiG9w0BCRUxBgQEAQAAADBdBgkqhkiG9w0BCRQxUB5OAHQAZQAtADYANwA0ADEAMwA1ADMANAAtADgANABjAGIALQA0ADQANwAyAC0AYgBlADcAZAAtAGYAYQBjADEAYQA5ADIANQAzADMANQA0MF0GCSsGAQQBgjcRATFQHk4ATQBpAGMAcgBvAHMAbwBmAHQAIABTAG8AZgB0AHcAYQByAGUAIABLAGUAeQAgAFMAdABvAHIAYQBnAGUAIABQAHIAbwB2AGkAZABlAHIwggP3BgkqhkiG9w0BBwagggPoMIID5AIBADCCA90GCSqGSIb3DQEHATAcBgoqhkiG9w0BDAEDMA4ECL2HET/KhN84AgIH0ICCA7CIoDUvu5z8GHjIeQLV+oXfpzRoeIpXWkVKt43Vttx/wyGiW3H1J8azovNkoGChtjo+vIBT4SoB0aigDCEeyXV+TNKDbZ59kQl7wWFidjEQtToQ7c/lxnMMufqXOxraXxzIatYv5rkLf3WKom9Tjz2SlXWtn7dLgLAXUyvZJdvEyWAkPWt/+4D+GRRJm7a1+UofkkLCF209UNoPNPnav+U6By9MmJu5xELl9LgxriYb4EeIN2Wi05PUxmpvgik/RyGX21eQBWVF6al9qPQ0k7f+Z2EkvWC5Wua6BOSk9/qVnFvYlLQoSaGEwaKMfpqd1FqjgVG4YIrYrH04z64ZEpjv0lFvWlGU/PDDmA1O6Iw0LW4QMGrStJTZbINpZ9sA6NjldYLbghjHAv9IJFMYis97U3mUCroS0fDNlG67hbwyYdlEkKcw1u+4iaWmaUMHY3hSkzKtGGYPn/xgewKApTKpmrjaBDPFRoP7xP8oLm1+qD8sSkXsmqltRvtMn2IducMzhiAwRDWb7s3VHg7BpPcHVo61Vdkeerstj0SKn8PsySwfua9KOZ0xoB71/TA0tx51DMvzM9hdMxvDwwOuGV3Mb+yOV/L822CUcRHDz9a92D7K4FcLoTp/2yGHsuwJPmX4ILKfwte2hIi6xIh8X0023vnZouEtlPRRQ3FYC939uaJlDG7XSZNYf52r3IcPKuvdmEwJCEiQpmITug1TU+QFrMXzK88A5tLy7ACjOo9QIUljCtH2FX2B50Pivu+6TbMmOUjX4EUSgsh9PonGSQxL4tIUfJgyyCUs6MnTRdWeqNA1hE4n+NOY4dY66lSIWjN4pw131+c2YqhN0Mz0okpjnZ20xvuxWQJJoi5xOqrvQbNCt8MekTi37en9B7Hgcs20aVZJreRVgNr1DjLigIMLFpNZXydh55FEobGgIw5kl5RUfo0sg0YI4Io84r3JpBasxtM65eT/U9R6yBLp9OMUyJiPye65B6iWE1A+BBlfg3ECu+nykkp/ruu3tdgX/C8jY3qdfNi7f1ekYYxHEqOekBeft31Xhm6JAdCA6vGESCGEKWQ2mN6TVNl0Vo4IWMR0ZU/tF2a7omoUeDBkpZVu60KmFNbHGXYFWen7vwnbHz6sPovzZhzmKJxhYXq4906vwyGCdFZGb0aqPa43mF/s2qpXKBbW1mXMCdnrM3dxKSm3MlCCvjHic42krXw2n0gXtYA9YSNkVV4exMW6nWpq26amXTzdbJ4B2U6X7OdOCzA7MB8wBwYFKw4DAhoEFAahKHY8ZOr9IU4bdqgwdV/MI7JkBBSaowGCmFDYjoMYZwLGxCNVQdMvIQICB9A=",
                    "secretName": "[replace(parameters('appGatewayFQDN'), '.', '-')]",
                    "subjectName": "[format('CN={0}', parameters('appGatewayFQDN'))]",
                    "certData": "[if(equals(parameters('appGatewayCertType'), 'selfsigned'), 'null', variables('$fxv#0'))]",
                    "certPwd": "[if(equals(parameters('appGatewayCertType'), 'selfsigned'), 'null', parameters('certPassword'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                      "apiVersion": "2019-09-01",
                      "name": "[format('{0}/add', parameters('keyVaultName'))]",
                      "properties": {
                        "accessPolicies": [
                          {
                            "objectId": "[parameters('managedIdentity').properties.principalId]",
                            "tenantId": "[parameters('managedIdentity').properties.tenantId]",
                            "permissions": {
                              "secrets": [
                                "get",
                                "list"
                              ],
                              "certificates": [
                                "import",
                                "get",
                                "list",
                                "update",
                                "create"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-certificate', variables('secretName'))]",
                      "location": "[parameters('location')]",
                      "kind": "AzurePowerShell",
                      "properties": {
                        "azPowerShellVersion": "6.6",
                        "arguments": "[format(' -vaultName {0} -certificateName {1} -subjectName {2} -certPwd {3} -certDataString {4} -certType {5}', parameters('keyVaultName'), variables('secretName'), variables('subjectName'), variables('certPwd'), variables('certData'), parameters('appGatewayCertType'))]",
                        "scriptContent": "      param(\n      [string] [Parameter(Mandatory=$true)] $vaultName,\n      [string] [Parameter(Mandatory=$true)] $certificateName,\n      [string] [Parameter(Mandatory=$true)] $subjectName,\n      [string] [Parameter(Mandatory=$true)] $certPwd,\n      [string] [Parameter(Mandatory=$true)] $certDataString,\n      [string] [Parameter(Mandatory=$true)] $certType\n      )\n\n      $ErrorActionPreference = 'Stop'\n      $DeploymentScriptOutputs = @{}\n      if ($certType -eq 'selfsigned') {\n        $policy = New-AzKeyVaultCertificatePolicy -SubjectName $subjectName -IssuerName Self -ValidityInMonths 12 -Verbose\n        \n        # private key is added as a secret that can be retrieved in the ARM template\n        Add-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName -CertificatePolicy $policy -Verbose\n        \n        $newCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName\n\n        # it takes a few seconds for KeyVault to finish\n        $tries = 0\n        do {\n          Write-Host 'Waiting for certificate creation completion...'\n          Start-Sleep -Seconds 10\n          $operation = Get-AzKeyVaultCertificateOperation -VaultName $vaultName -Name $certificateName\n          $tries++\n\n          if ($operation.Status -eq 'failed')\n          {\n          throw 'Creating certificate $certificateName in vault $vaultName failed with error $($operation.ErrorMessage)'\n          }\n\n          if ($tries -gt 120)\n          {\n          throw 'Timed out waiting for creation of certificate $certificateName in vault $vaultName'\n          }\n        } while ($operation.Status -ne 'completed')\t\t\n      }\n      else {\n        $ss = Convertto-SecureString -String $certPwd -AsPlainText -Force; \n        Import-AzKeyVaultCertificate -Name $certificateName -VaultName $vaultName -CertificateString $certDataString -Password $ss\n      }\n      ",
                        "retentionInterval": "P1D"
                      },
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('/subscriptions/{0}/resourceGroups/{1}/providers/{2}', parameters('managedIdentity').subscriptionId, parameters('managedIdentity').resourceGroupName, parameters('managedIdentity').resourceId)]": {}
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', split(format('{0}/add', parameters('keyVaultName')), '/')[0], split(format('{0}/add', parameters('keyVaultName')), '/')[1])]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-certificate', variables('secretName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "secretName": {
                            "value": "[variables('secretName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.8.9.13224",
                              "templateHash": "16715823327727975971"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "secretName": {
                              "type": "string"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "secretUri": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/{1}', parameters('keyVaultName'), parameters('secretName')), '/')[0], split(format('{0}/{1}', parameters('keyVaultName'), parameters('secretName')), '/')[1]), '2021-06-01-preview').secretUriWithVersion]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deploymentScripts', format('{0}-certificate', variables('secretName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "secretUri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-certificate', variables('secretName')))).outputs.secretUri.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('appGatewayIdentityId'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('apimResourceGroupName')), 'Microsoft.Resources/deployments', 'apimDeploy')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('apimResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('sharedResourceGroupName')), 'Microsoft.Resources/deployments', 'apimDnsZoneDeploy')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('networkingResourceGroupName')), 'Microsoft.Resources/deployments', 'networkingresources')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('sharedResourceGroupName')), 'Microsoft.Resources/deployments', 'sharedresources')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('sharedResourceGroupName'))]"
      ]
    }
  ]
}
